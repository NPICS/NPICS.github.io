/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface NpicsInterface extends utils.Interface {
  functions: {
    "__NPics_init(address,address,address)": FunctionFragment;
    "acceptOrder(address,uint256,address,bytes,address)": FunctionFragment;
    "availableBorrowsInETH(address)": FunctionFragment;
    "batchRepayETH(address[],uint256[],uint256[])": FunctionFragment;
    "claimRewards()": FunctionFragment;
    "createNBP(address,uint256)": FunctionFragment;
    "createNEO(address)": FunctionFragment;
    "downPayWithETH(address,uint256,address,bytes,uint256,uint256)": FunctionFragment;
    "downPayWithWETH(address,uint256,address,bytes,uint256,uint256,uint256)": FunctionFragment;
    "getConfig(bytes32)": FunctionFragment;
    "getConfigA(bytes32,address)": FunctionFragment;
    "getConfigI(bytes32,uint256)": FunctionFragment;
    "getDebtWEthOf(address)": FunctionFragment;
    "getLoanReserveBorrowAmount(address,uint256)": FunctionFragment;
    "getNbpFor(address,uint256)": FunctionFragment;
    "getNeoFor(address)": FunctionFragment;
    "getRewardsBalance(address)": FunctionFragment;
    "governor()": FunctionFragment;
    "implementation()": FunctionFragment;
    "implementations(bytes32)": FunctionFragment;
    "nbpA(uint256)": FunctionFragment;
    "nbpFor(address,uint256)": FunctionFragment;
    "nbpN()": FunctionFragment;
    "nbps(address,uint256)": FunctionFragment;
    "neoA(uint256)": FunctionFragment;
    "neoFor(address)": FunctionFragment;
    "neoN()": FunctionFragment;
    "neos(address)": FunctionFragment;
    "renounceGovernorship_()": FunctionFragment;
    "repayETH(address,uint256,uint256)": FunctionFragment;
    "setConfigA_(bytes32,address,uint256)": FunctionFragment;
    "setConfigI_(bytes32,uint256,uint256)": FunctionFragment;
    "setConfig_(bytes32,uint256)": FunctionFragment;
    "transferGovernorship_(address)": FunctionFragment;
    "upgradeImplementationTo(address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "__NPics_init"
      | "acceptOrder"
      | "availableBorrowsInETH"
      | "batchRepayETH"
      | "claimRewards"
      | "createNBP"
      | "createNEO"
      | "downPayWithETH"
      | "downPayWithWETH"
      | "getConfig"
      | "getConfigA"
      | "getConfigI"
      | "getDebtWEthOf"
      | "getLoanReserveBorrowAmount"
      | "getNbpFor"
      | "getNeoFor"
      | "getRewardsBalance"
      | "governor"
      | "implementation"
      | "implementations"
      | "nbpA"
      | "nbpFor"
      | "nbpN"
      | "nbps"
      | "neoA"
      | "neoFor"
      | "neoN"
      | "neos"
      | "renounceGovernorship_"
      | "repayETH"
      | "setConfigA_"
      | "setConfigI_"
      | "setConfig_"
      | "transferGovernorship_"
      | "upgradeImplementationTo"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "__NPics_init",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOrder",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "availableBorrowsInETH",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "batchRepayETH",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createNBP",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createNEO",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "downPayWithETH",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "downPayWithWETH",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getConfig",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getConfigA",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getConfigI",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDebtWEthOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLoanReserveBorrowAmount",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNbpFor",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNeoFor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardsBalance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "implementations",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "nbpA",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "nbpFor",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "nbpN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nbps",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "neoA",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "neoFor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "neoN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "neos",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceGovernorship_",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repayETH",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setConfigA_",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setConfigI_",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setConfig_",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferGovernorship_",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeImplementationTo",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "__NPics_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "availableBorrowsInETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchRepayETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createNBP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createNEO", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "downPayWithETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "downPayWithWETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getConfigA", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getConfigI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDebtWEthOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLoanReserveBorrowAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNbpFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getNeoFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRewardsBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "implementations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nbpA", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nbpFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nbpN", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nbps", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "neoA", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "neoFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "neoN", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "neos", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceGovernorship_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repayETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setConfigA_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setConfigI_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setConfig_", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferGovernorship_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeImplementationTo",
    data: BytesLike
  ): Result;

  events: {
    "AcceptOrder(address,address,uint256,uint256)": EventFragment;
    "CreateNBP(address,address,uint256,address,uint256)": EventFragment;
    "CreateNEO(address,address,address,uint256)": EventFragment;
    "DownPayWithETH(address,address,uint256,uint256,uint256)": EventFragment;
    "GovernorshipTransferred(address,address)": EventFragment;
    "RepayETH(address,address,uint256,uint256,bool)": EventFragment;
    "RewardsClaimed(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AcceptOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateNBP"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateNEO"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DownPayWithETH"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernorshipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RepayETH"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsClaimed"): EventFragment;
}

export interface AcceptOrderEventObject {
  sender: string;
  nft: string;
  tokenId: BigNumber;
  value: BigNumber;
}
export type AcceptOrderEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  AcceptOrderEventObject
>;

export type AcceptOrderEventFilter = TypedEventFilter<AcceptOrderEvent>;

export interface CreateNBPEventObject {
  creator: string;
  nft: string;
  tokenId: BigNumber;
  nbp: string;
  count: BigNumber;
}
export type CreateNBPEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber],
  CreateNBPEventObject
>;

export type CreateNBPEventFilter = TypedEventFilter<CreateNBPEvent>;

export interface CreateNEOEventObject {
  creator: string;
  nft: string;
  neo: string;
  count: BigNumber;
}
export type CreateNEOEvent = TypedEvent<
  [string, string, string, BigNumber],
  CreateNEOEventObject
>;

export type CreateNEOEventFilter = TypedEventFilter<CreateNEOEvent>;

export interface DownPayWithETHEventObject {
  sender: string;
  nft: string;
  tokenId: BigNumber;
  value: BigNumber;
  loanAmt: BigNumber;
}
export type DownPayWithETHEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  DownPayWithETHEventObject
>;

export type DownPayWithETHEventFilter = TypedEventFilter<DownPayWithETHEvent>;

export interface GovernorshipTransferredEventObject {
  previousGovernor: string;
  newGovernor: string;
}
export type GovernorshipTransferredEvent = TypedEvent<
  [string, string],
  GovernorshipTransferredEventObject
>;

export type GovernorshipTransferredEventFilter =
  TypedEventFilter<GovernorshipTransferredEvent>;

export interface RepayETHEventObject {
  sender: string;
  nftAsset: string;
  nftTokenId: BigNumber;
  repayAmount: BigNumber;
  repayAll: boolean;
}
export type RepayETHEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, boolean],
  RepayETHEventObject
>;

export type RepayETHEventFilter = TypedEventFilter<RepayETHEvent>;

export interface RewardsClaimedEventObject {
  user: string;
  amount: BigNumber;
}
export type RewardsClaimedEvent = TypedEvent<
  [string, BigNumber],
  RewardsClaimedEventObject
>;

export type RewardsClaimedEventFilter = TypedEventFilter<RewardsClaimedEvent>;

export interface Npics extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NpicsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    __NPics_init(
      governor: PromiseOrValue<string>,
      implNEO: PromiseOrValue<string>,
      implNBP: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    acceptOrder(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      market: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      approveTo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    availableBorrowsInETH(
      nft: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { r: BigNumber }>;

    batchRepayETH(
      nftAssets: PromiseOrValue<string>[],
      nftTokenIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createNBP(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createNEO(
      nft: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    downPayWithETH(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      market: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      price: PromiseOrValue<BigNumberish>,
      loanAmt: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    downPayWithWETH(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      market: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      price: PromiseOrValue<BigNumberish>,
      loanAmt: PromiseOrValue<BigNumberish>,
      wethAmt: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getConfig(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getConfigA(
      key: PromiseOrValue<BytesLike>,
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getConfigI(
      key: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDebtWEthOf(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amt: BigNumber }>;

    getLoanReserveBorrowAmount(
      nftAsset: PromiseOrValue<string>,
      nftTokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { reserveAsset: string; repayDebtAmount: BigNumber }
    >;

    getNbpFor(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { nbp: string }>;

    getNeoFor(
      nft: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { neo: string }>;

    getRewardsBalance(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amt: BigNumber }>;

    governor(overrides?: CallOverrides): Promise<[string]>;

    implementation(overrides?: CallOverrides): Promise<[string]>;

    implementations(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    nbpA(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    nbpFor(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { nbp: string }>;

    nbpN(overrides?: CallOverrides): Promise<[BigNumber]>;

    nbps(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    neoA(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    neoFor(
      nft: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { neo: string }>;

    neoN(overrides?: CallOverrides): Promise<[BigNumber]>;

    neos(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    renounceGovernorship_(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    repayETH(
      nftAsset: PromiseOrValue<string>,
      nftTokenId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setConfigA_(
      key: PromiseOrValue<BytesLike>,
      addr: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setConfigI_(
      key: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setConfig_(
      key: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferGovernorship_(
      newGovernor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeImplementationTo(
      implNEO: PromiseOrValue<string>,
      implNBP: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  __NPics_init(
    governor: PromiseOrValue<string>,
    implNEO: PromiseOrValue<string>,
    implNBP: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  acceptOrder(
    nft: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    market: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    approveTo: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  acceptOffer(
    nft: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    market: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    approveTo: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  availableBorrowsInETH(
    nft: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  batchRepayETH(
    nftAssets: PromiseOrValue<string>[],
    nftTokenIds: PromiseOrValue<BigNumberish>[],
    amounts: PromiseOrValue<BigNumberish>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimRewards(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createNBP(
    nft: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createNEO(
    nft: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  downPayWithETH(
    nft: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    market: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    price: PromiseOrValue<BigNumberish>,
    loanAmt: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  downPayWithWETH(
    nft: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    market: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    price: PromiseOrValue<BigNumberish>,
    loanAmt: PromiseOrValue<BigNumberish>,
    wethAmt: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getConfig(
    key: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getConfigA(
    key: PromiseOrValue<BytesLike>,
    addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getConfigI(
    key: PromiseOrValue<BytesLike>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDebtWEthOf(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLoanReserveBorrowAmount(
    nftAsset: PromiseOrValue<string>,
    nftTokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & { reserveAsset: string; repayDebtAmount: BigNumber }
  >;

  getNbpFor(
    nft: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getNeoFor(
    nft: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRewardsBalance(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  governor(overrides?: CallOverrides): Promise<string>;

  implementation(overrides?: CallOverrides): Promise<string>;

  implementations(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  nbpA(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  nbpFor(
    nft: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  nbpN(overrides?: CallOverrides): Promise<BigNumber>;

  nbps(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  neoA(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  neoFor(
    nft: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  neoN(overrides?: CallOverrides): Promise<BigNumber>;

  neos(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  renounceGovernorship_(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  repayETH(
    nftAsset: PromiseOrValue<string>,
    nftTokenId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setConfigA_(
    key: PromiseOrValue<BytesLike>,
    addr: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setConfigI_(
    key: PromiseOrValue<BytesLike>,
    index: PromiseOrValue<BigNumberish>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setConfig_(
    key: PromiseOrValue<BytesLike>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferGovernorship_(
    newGovernor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeImplementationTo(
    implNEO: PromiseOrValue<string>,
    implNBP: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    __NPics_init(
      governor: PromiseOrValue<string>,
      implNEO: PromiseOrValue<string>,
      implNBP: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    acceptOrder(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      market: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      approveTo: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    availableBorrowsInETH(
      nft: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchRepayETH(
      nftAssets: PromiseOrValue<string>[],
      nftTokenIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], boolean[]] & {
        repayAmounts: BigNumber[];
        repayAlls: boolean[];
      }
    >;

    claimRewards(overrides?: CallOverrides): Promise<BigNumber>;

    createNBP(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    createNEO(
      nft: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    downPayWithETH(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      market: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      price: PromiseOrValue<BigNumberish>,
      loanAmt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    downPayWithWETH(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      market: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      price: PromiseOrValue<BigNumberish>,
      loanAmt: PromiseOrValue<BigNumberish>,
      wethAmt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getConfig(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getConfigA(
      key: PromiseOrValue<BytesLike>,
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getConfigI(
      key: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDebtWEthOf(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLoanReserveBorrowAmount(
      nftAsset: PromiseOrValue<string>,
      nftTokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { reserveAsset: string; repayDebtAmount: BigNumber }
    >;

    getNbpFor(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getNeoFor(
      nft: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRewardsBalance(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<string>;

    implementation(overrides?: CallOverrides): Promise<string>;

    implementations(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    nbpA(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    nbpFor(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    nbpN(overrides?: CallOverrides): Promise<BigNumber>;

    nbps(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    neoA(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    neoFor(
      nft: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    neoN(overrides?: CallOverrides): Promise<BigNumber>;

    neos(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    renounceGovernorship_(overrides?: CallOverrides): Promise<void>;

    repayETH(
      nftAsset: PromiseOrValue<string>,
      nftTokenId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { repayAmount: BigNumber; repayAll: boolean }
    >;

    setConfigA_(
      key: PromiseOrValue<BytesLike>,
      addr: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setConfigI_(
      key: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setConfig_(
      key: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferGovernorship_(
      newGovernor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeImplementationTo(
      implNEO: PromiseOrValue<string>,
      implNBP: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AcceptOrder(address,address,uint256,uint256)"(
      sender?: PromiseOrValue<string> | null,
      nft?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      value?: null
    ): AcceptOrderEventFilter;
    AcceptOrder(
      sender?: PromiseOrValue<string> | null,
      nft?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      value?: null
    ): AcceptOrderEventFilter;

    "CreateNBP(address,address,uint256,address,uint256)"(
      creator?: PromiseOrValue<string> | null,
      nft?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      nbp?: null,
      count?: null
    ): CreateNBPEventFilter;
    CreateNBP(
      creator?: PromiseOrValue<string> | null,
      nft?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      nbp?: null,
      count?: null
    ): CreateNBPEventFilter;

    "CreateNEO(address,address,address,uint256)"(
      creator?: PromiseOrValue<string> | null,
      nft?: PromiseOrValue<string> | null,
      neo?: PromiseOrValue<string> | null,
      count?: null
    ): CreateNEOEventFilter;
    CreateNEO(
      creator?: PromiseOrValue<string> | null,
      nft?: PromiseOrValue<string> | null,
      neo?: PromiseOrValue<string> | null,
      count?: null
    ): CreateNEOEventFilter;

    "DownPayWithETH(address,address,uint256,uint256,uint256)"(
      sender?: PromiseOrValue<string> | null,
      nft?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      value?: null,
      loanAmt?: null
    ): DownPayWithETHEventFilter;
    DownPayWithETH(
      sender?: PromiseOrValue<string> | null,
      nft?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      value?: null,
      loanAmt?: null
    ): DownPayWithETHEventFilter;

    "GovernorshipTransferred(address,address)"(
      previousGovernor?: PromiseOrValue<string> | null,
      newGovernor?: PromiseOrValue<string> | null
    ): GovernorshipTransferredEventFilter;
    GovernorshipTransferred(
      previousGovernor?: PromiseOrValue<string> | null,
      newGovernor?: PromiseOrValue<string> | null
    ): GovernorshipTransferredEventFilter;

    "RepayETH(address,address,uint256,uint256,bool)"(
      sender?: PromiseOrValue<string> | null,
      nftAsset?: PromiseOrValue<string> | null,
      nftTokenId?: PromiseOrValue<BigNumberish> | null,
      repayAmount?: null,
      repayAll?: null
    ): RepayETHEventFilter;
    RepayETH(
      sender?: PromiseOrValue<string> | null,
      nftAsset?: PromiseOrValue<string> | null,
      nftTokenId?: PromiseOrValue<BigNumberish> | null,
      repayAmount?: null,
      repayAll?: null
    ): RepayETHEventFilter;

    "RewardsClaimed(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): RewardsClaimedEventFilter;
    RewardsClaimed(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): RewardsClaimedEventFilter;
  };

  estimateGas: {
    __NPics_init(
      governor: PromiseOrValue<string>,
      implNEO: PromiseOrValue<string>,
      implNBP: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    acceptOrder(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      market: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      approveTo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    availableBorrowsInETH(
      nft: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchRepayETH(
      nftAssets: PromiseOrValue<string>[],
      nftTokenIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createNBP(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createNEO(
      nft: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    downPayWithETH(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      market: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      price: PromiseOrValue<BigNumberish>,
      loanAmt: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    downPayWithWETH(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      market: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      price: PromiseOrValue<BigNumberish>,
      loanAmt: PromiseOrValue<BigNumberish>,
      wethAmt: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getConfig(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getConfigA(
      key: PromiseOrValue<BytesLike>,
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getConfigI(
      key: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDebtWEthOf(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLoanReserveBorrowAmount(
      nftAsset: PromiseOrValue<string>,
      nftTokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNbpFor(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNeoFor(
      nft: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardsBalance(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    implementation(overrides?: CallOverrides): Promise<BigNumber>;

    implementations(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nbpA(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nbpFor(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nbpN(overrides?: CallOverrides): Promise<BigNumber>;

    nbps(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    neoA(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    neoFor(
      nft: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    neoN(overrides?: CallOverrides): Promise<BigNumber>;

    neos(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceGovernorship_(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    repayETH(
      nftAsset: PromiseOrValue<string>,
      nftTokenId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setConfigA_(
      key: PromiseOrValue<BytesLike>,
      addr: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setConfigI_(
      key: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setConfig_(
      key: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferGovernorship_(
      newGovernor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeImplementationTo(
      implNEO: PromiseOrValue<string>,
      implNBP: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    __NPics_init(
      governor: PromiseOrValue<string>,
      implNEO: PromiseOrValue<string>,
      implNBP: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    acceptOrder(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      market: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      approveTo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    availableBorrowsInETH(
      nft: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchRepayETH(
      nftAssets: PromiseOrValue<string>[],
      nftTokenIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createNBP(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createNEO(
      nft: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    downPayWithETH(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      market: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      price: PromiseOrValue<BigNumberish>,
      loanAmt: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    downPayWithWETH(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      market: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      price: PromiseOrValue<BigNumberish>,
      loanAmt: PromiseOrValue<BigNumberish>,
      wethAmt: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getConfig(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getConfigA(
      key: PromiseOrValue<BytesLike>,
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getConfigI(
      key: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDebtWEthOf(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLoanReserveBorrowAmount(
      nftAsset: PromiseOrValue<string>,
      nftTokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNbpFor(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNeoFor(
      nft: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardsBalance(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    implementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    implementations(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nbpA(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nbpFor(
      nft: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nbpN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nbps(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    neoA(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    neoFor(
      nft: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    neoN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    neos(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceGovernorship_(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    repayETH(
      nftAsset: PromiseOrValue<string>,
      nftTokenId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setConfigA_(
      key: PromiseOrValue<BytesLike>,
      addr: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setConfigI_(
      key: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setConfig_(
      key: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferGovernorship_(
      newGovernor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeImplementationTo(
      implNEO: PromiseOrValue<string>,
      implNBP: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
